<a:Api>
    <Copyright>
        Copyright 1996-2008 Ariba, Inc.

        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at
            http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.

        $Id:  $
    </Copyright>

    <Overview>
        AWFor is the fundamental unrolling contruct for repeated content.  It's
        body is re-evaluated for each item in the supplied list.

        Typical use:

                <a:For item="$currentItem" list="$myItems">
                    <tr>
                        <td>$currentItem.name</td>
                        <td>$currentItem.description</td>
                    </tr>
                </a:For>
    </Overview>

    <Binding key="list" direction="get" type="AWOrderedList" required="$true">
        This list (java.util.List, native Array, etc) containing the items
        being unrolled.
    </Binding>

    <Binding key="item" direction="set" type="Object" >
        Binding pushed into for each iteration
    </Binding>

    <Binding key="count" direction="get" type="int">
        Maximum number of items to iterate over
    </Binding>

    <Binding key="index" direction="set" type="int">
        Binding pushed with the index of the current item
    </Binding>

    <Binding key="start" direction="get" type="int">
        The index of the initial item to be unrolled.  (Can be used in concert with
        count to process a sub-section of the list)
    </Binding>

    <Binding key="scopeSubcomponentsByItem" direction="get" type="boolean">
        Rarely used (use with caution).  Normally any stateful subcomponents in a repetition
        are associated by *position* (index).  If, instead, they should be associated
        by the *object identity* of the items in the loop, scopeSubcomponentsByItem
        can be set to true.  (This can be useful in contexts where, for instance, items
        in a table can shift position and any stateful components in the table should
        "move" with their items).
    </Binding>
</a:Api>\
