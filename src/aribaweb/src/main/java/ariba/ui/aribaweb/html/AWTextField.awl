<a:Api>
    <Copyright>
        Copyright 1996-2010 Ariba, Inc.

        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at
            http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.

        $Id: //ariba/platform/ui/aribaweb/ariba/ui/aribaweb/html/AWTextField.awl#44 $
    </Copyright>

    <Overview>
        Renders an `<input type="text" .../>` tag, which is a standard html text field input form element.  As with other
            aribaweb form elements, also provides for mapping the input from the request back into the object from which
            it came.  In addition, formatting support is provided to both render and re-map the users String values into
            proper objects suitable for putting back into the source object.
    </Overview>

    <Binding key="value" type="Object" required="$true" direction="both">
        The value attribute is used to both get and set the value from/to the source object.  During renderResponse,
        the value is used to render a String into the outgoing response (via an optional formatter).  During applyValues,
        the value is used to put the user's input back into the source object (after the optional formatter parses the
        input String into the appropriate object class).  Note that, if the user dowsn't type anything into a blank field,
        this will put an empty string into the destination and not $null.
    </Binding>

    <Binding key="editable" type="boolean" direction="get" required="$false">
        Indicates whether the value is editable.  If the binding is not supplied,
        a value is taken from the page environment.
    </Binding>

    <Binding key="formatter" type="AWFormatting" default="$null" direction="get">
        The formatter is used to convert the user's value Object into a String during renderResponse and back into an
        object of the appropriate subclass during applyValues.  Many different types of formatters are acceptable.
        Implementations of AWFormatting have been done for java.text.Format, ariba.util.Formatter, and AWFormatter.
    </Binding>

    <Binding key="autoselect" type="boolean" default="$true" direction="get">
        By default, the first TextField in the page will autoselect itself using a small amount of Javascript.  You can
        disable that via this binding, hwever if someone later places a TextField somewhere earlier in the page, then
        it will grab the autoselect and this attribute will not apply.
    </Binding>

    <Binding key="onChange" type="String" default="$null" direction="get">
        Allows for providing your own onChange handler in JavaScript.  As with all event handlers for AribaWeb based
        components, it is strongly recommended that you not use them as their use may conflict with internal implementation.
    </Binding>

    <Binding key="action" type="AWResponseGenerating" default="$null" direction="get">
        Allows for enabling to submit the form with the indicated action.
    </Binding>

    <Binding key="isRefresh" type="boolean" default="$false" direction="get">
        If set to true, Javascript onKeyDown handler is set to submit the enclosing form.  If set to true
        then the onChange binding is ignored.
    </Binding>

    <Binding key="name" type="String" default="elementId" direction="get">
        The name attribute allows for providing your own name for the TextField.  As with other AribaWeb based components
        in the system, it is strongly recommended that you not provide your own name as the system cannot guarantee that
        the name is unique across the page.
    </Binding>

    <Binding key="emptyStringValue" type="Object" required="$false" direction="get">
        The emptyStringValue attribute allows for providing a default value in the event the user doesn't enter anything
        in the TextField.  For example, since an empty TextField will push an empty String into the object, you may want
        to treat this as $null.  You could do this with a formatter as well, but this provides an alternative to a custom
        formatter.  emptyStringValue does not get displayed to the user.
    </Binding>

    <Binding key="placeholder" type="Object" required="$false" direction="get">
        Placeholder text displayed to the user when value is null or empty.
        Placeholder does not get push to the parent component.
    </Binding>

    <Binding key="id" type="String" required="$false" direction="get" deprecated="$true">
        An alternative to the 'name' binding.
    </Binding>

    <Binding key="onKeyDown" direction="get" type="String" default="$false">
        Do not use this binding.  This is documented here to prevent onKeyDown
        from being available in "otherBindings".
    </Binding>

    <Binding key="errorKey" type="Object" direction="get" required="$false">
        If you have a formatter binding, then the String value typed in by the user will be parsed
        through that formatter.  Should a parse exception occur, this error key will be used to record the
        error, along with the errantValue, into the AWErrorManager on the AWPage.  If you do
        not provide an errorKey, the elementId of this textfield will be used.
    </Binding>

    <Binding key="disabled" type="boolean" default="$false" direction="get">
        Disables the text field if true.
    </Binding>

    <Binding key="behavior" direction="get" type="String" required="$false">
        For internal use: Allow for override of text field behavior.
    </Binding>

    <Binding key="formValueStrings" direction="set" type="Object[]" required="$false">
        The trimmed and untrimmed value pair.
    </Binding>

    <Binding key="class" direction="get" type="String" required="$false">
        CSS class
    </Binding>

    <Binding key="size" direction="get" type="int" required="$false">
        INPUT size (if not specified tfW class applied, resulting in 156px wide field)
    </Binding>

    <IncludeExample component="TextFieldExample"/>

    <Example name="Basic Use">
        <a:TextField/>
    </Example>

</a:Api>\
<a:If ifTrue="$isEditable">\
    <input type="text" elementId="$elementId" id="$textFieldId" name="$textFieldName"
        value="$formattedValue" formValue="$formValue" onChange="$onChangeString"
        _tf="$tfActionType" invokeAction="$invokeAction" isSender="$isSender"
        awautoselect="$allowAutoFocus"
        disabled="$isDisabled"
        size="$^size"
        class="$cssClass"
        bh="$^behavior:TF"
        onBLur="$onBlurString"
        _pl="$formatPlaceHolder"
        otherBindings="$otherBindingsValues"
        autocorrect="off" autocapitalize="off"/>\
    <a:RefreshRegion>\
        <a:If ifTrue="$isInHighLightedErrorScope">
            <a:ClientSideScript>\
                ariba.Input.setTextFocus('$textFieldId');\
            </a:ClientSideScript>\
        </a:If>
    </a:RefreshRegion>
<a:Else/>\
    <a:String value="$formattedValue"/>\
</a:If>\
